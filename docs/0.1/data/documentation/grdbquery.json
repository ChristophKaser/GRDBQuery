{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This package provides the "},{"type":"codeVoice","code":"@Query"},{"type":"text","text":" property wrapper, that lets your SwiftUI views automatically update their content when the database changes."}]},{"type":"codeListing","syntax":"swift","code":["import GRDBQuery","import SwiftUI","","\/\/\/ A view that displays an always up-to-date list of players in the database.","struct PlayerList: View {","    @Query(AllPlayers())","    var players: [Player]","    ","    var body: some View {","        List(players) { player in","            Text(player.name)","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"@Query"},{"type":"text","text":" is for "},{"type":"reference","isActive":true,"identifier":"http:\/\/github.com\/groue\/GRDB.swift"},{"type":"text","text":" what "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/fetchrequest"},{"type":"text","text":" is for Core Data. Although "},{"type":"codeVoice","code":"@Query"},{"type":"text","text":" does not depend on GRDB, it was designed with GRDB in mind."}]},{"anchor":"Why-@Query?","level":2,"type":"heading","text":"Why @Query?"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"codeVoice","code":"@Query"},{"type":"text","text":" solves a tricky SwiftUI challenge."}]},{"type":"text","text":" It makes sure SwiftUI views are "},{"type":"emphasis","inlineContent":[{"type":"text","text":"immediately"}]},{"type":"text","text":" rendered with the database content you expect."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, when you display a "},{"type":"codeVoice","code":"List"},{"type":"text","text":" that animates its changes, you do not want to see an animation for the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"initial"}]},{"type":"text","text":" state of the list, or to prevent this undesired animation with extra code."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You also want your SwiftUI previews to display the expected values "},{"type":"emphasis","inlineContent":[{"type":"text","text":"without having to run them"}]},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Techniques based on "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/view\/onappear(perform:)"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/view\/onreceive(_:perform:)"},{"type":"text","text":" and similar methods suffer from this “double-rendering” problem and its side effects. By contrast, "},{"type":"codeVoice","code":"@Query"},{"type":"text","text":" has you fully covered."}]},{"anchor":"Usage","level":2,"type":"heading","text":"Usage"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"To use "},{"type":"codeVoice","code":"@Query"},{"type":"text","text":", first define a new environment key that grants access to the database."}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example below, we define a new "},{"type":"codeVoice","code":"dbQueue"},{"type":"text","text":" environment key whose value is a GRDB "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/groue\/GRDB.swift\/blob\/master\/README.md#database-queues"},{"type":"text","text":". Some other apps, like the "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/groue\/GRDB.swift\/tree\/master\/Documentation\/DemoApps"},{"type":"text","text":", can choose another name and another type, such as a “database manager” that encapsulates database accesses."}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"You are free to choose any type you want"}]},{"type":"text","text":", as long as it is possible to create Combine publishers out of it, the publishers of database values that will feed the SwiftUI views."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/environmentkey"},{"type":"text","text":" describes the procedure:"}]},{"type":"codeListing","syntax":"swift","code":["import GRDB","import SwiftUI","","private struct DatabaseQueueKey: EnvironmentKey {","    \/\/\/ The default dbQueue is an empty in-memory database","    static var defaultValue: DatabaseQueue { DatabaseQueue() }","}","","extension EnvironmentValues {","    var dbQueue: DatabaseQueue {","        get { self[DatabaseQueueKey.self] }","        set { self[DatabaseQueueKey.self] = newValue }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You will substitute the default empty database with an actual database on disk for your main application:"}]},{"type":"codeListing","syntax":"swift","code":["import SwiftUI","","@main","struct MyApp: App {","    var body: some Scene {","        WindowGroup {","            MyView().environment(\\.dbQueue, \/* some DatabaseQueue on disk *\/)","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You will feed SwiftUI previews with databases that you want to preview:"}]},{"type":"codeListing","syntax":"swift","code":["struct PlayerList_Previews: PreviewProvider {","    static var previews: some View {","        \/\/ Empty list","        PlayerList().environment(\\.dbQueue, \/* empty table of players *\/)","        ","        \/\/ Non-empty list","        PlayerList().environment(\\.dbQueue, \/* non-empty table of players *\/)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"See the "},{"overridingTitleInlineContent":[{"type":"text","text":"GRDB demo apps"}],"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/groue\/GRDB.swift\/tree\/master\/Documentation\/DemoApps","overridingTitle":"GRDB demo apps"},{"type":"text","text":" for examples of such setups."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Next, define a "},{"type":"codeVoice","code":"Queryable"},{"type":"text","text":" type for each database request you want to observe."}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example:"}]},{"type":"codeListing","syntax":"swift","code":["import Combine","import GRDB","import GRDBQuery","","\/\/\/ Tracks the full list of players","struct AllPlayers: Queryable {","    static var defaultValue: [Player] { [] }","    ","    func publisher(in dbQueue: DatabaseQueue) -> AnyPublisher<[Player], Error> {","        ValueObservation","            .tracking(Player.fetchAll)","            \/\/ The `.immediate` scheduling feeds the view right on subscription,","            \/\/ and avoids an initial rendering with an empty list:","            .publisher(in: dbQueue, scheduling: .immediate)","            .eraseToAnyPublisher()","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/Queryable"},{"type":"text","text":" protocol has two requirements: a default value, and a Combine publisher. The publisher is built from the "},{"type":"codeVoice","code":"DatabaseQueue"},{"type":"text","text":" stored in the environment (you’ll adapt this sample code if you prefer another type). The publisher tracks database changes with GRDB "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/groue\/GRDB.swift\/blob\/master\/README.md#valueobservation"},{"type":"text","text":". The default value is used until the publisher publishes its initial value."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the above sample code, we make sure the views are "},{"type":"emphasis","inlineContent":[{"type":"text","text":"immediately"}]},{"type":"text","text":" fed with database content with the "},{"type":"codeVoice","code":"scheduling: .immediate"},{"type":"text","text":" option. This prevents any “blank state”, or “flash of missing content”."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"scheduling: .immediate"},{"type":"text","text":" option should be removed for database requests that are too slow. In this case, views are initially fed with the default value, and the database content is notified later, when it becomes available. In the meantime, your view can display some waiting indicator, or a "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/view\/redacted(reason:)"},{"type":"text","text":" placeholder."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Finally"}]},{"type":"text","text":", you can define a SwiftUI view that automatically updates its content when the database changes:"}]},{"type":"codeListing","syntax":"swift","code":["import GRDBQuery","import SwiftUI","","struct PlayerList: View {","    @Query(AllPlayers(), in: \\.dbQueue)","    var players: [Player]","    ","    var body: some View {","        List(players) { player in","            HStack {","                Text(player.name)","                Spacer()","                Text(\"\\(player.score) points\")","            }","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"@Query"},{"type":"text","text":" exposes a binding to the request, so that views can change the request when they need. The "},{"overridingTitleInlineContent":[{"type":"text","text":"GRDB demo apps"}],"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/groue\/GRDB.swift\/tree\/master\/Documentation\/DemoApps","overridingTitle":"GRDB demo apps"},{"type":"text","text":", for example, use a "},{"type":"codeVoice","code":"Queryable"},{"type":"text","text":" type that can change the player ordering:"}]},{"type":"codeListing","syntax":"swift","code":["struct PlayerList: View {","    \/\/ Ordering can change through the $players.ordering binding.","    @Query(AllPlayers(ordering: .byScore))","    var players: [Player]","    ...","}"]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"As a convenience"}]},{"type":"text","text":", you can also define a dedicated "},{"type":"codeVoice","code":"Query"},{"type":"text","text":" initializer to use the "},{"type":"codeVoice","code":"dbQueue"},{"type":"text","text":" environment key automatically:"}]},{"type":"codeListing","syntax":"swift","code":["extension Query where Request.DatabaseContext == DatabaseQueue {","    init(_ request: Request) {","        self.init(request, in: \\.dbQueue)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This improves clarity at the call site:"}]},{"type":"codeListing","syntax":"swift","code":["struct PlayerList: View {","    @Query(AllPlayers())","    var players: [Player]","    ...","}"]},{"anchor":"How-to-Handle-Database-Errors?","level":2,"type":"heading","text":"How to Handle Database Errors?"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"By default, "},{"type":"codeVoice","code":"@Query"},{"type":"text","text":" ignores errors"}]},{"type":"text","text":" published by "},{"type":"codeVoice","code":"Queryable"},{"type":"text","text":" types. The SwiftUI views are just not updated whenever an error occurs. If the database is unavailable when the view appears, "},{"type":"codeVoice","code":"@Query"},{"type":"text","text":" will just output the default value."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can restore error handling by publishing a "},{"type":"codeVoice","code":"Result"},{"type":"text","text":", as in the example below:"}]},{"type":"codeListing","syntax":"swift","code":["import Combine","import GRDB","import GRDBQuery","","struct AllPlayers: Queryable {","    static var defaultValue: Result<[Player], Error> { .success([]) }","    ","    func publisher(in dbQueue: DatabaseQueue) -> AnyPublisher<Result<[Player], Error>, Never> {","        ValueObservation","            .tracking(Player.fetchAll)","            .publisher(in: dbQueue, scheduling: .immediate)","            .map { players in .success(players) }","            .catch { error in Just(.failure(error)) }","            .eraseToAnyPublisher()","    }","}"]}]}],"schemaVersion":{"major":0,"minor":2,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/grdbquery"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"The SwiftUI companion for GRDB"}],"kind":"symbol","metadata":{"roleHeading":"Framework","externalID":"GRDBQuery","title":"GRDBQuery","symbolKind":"module","role":"collection","modules":[{"name":"GRDBQuery"}]},"hierarchy":{"paths":[[]]},"topicSections":[{"title":"The @Query property wrapper","identifiers":["doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/Query"]},{"title":"Feeding @Query with database content","identifiers":["doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/Queryable"]}],"references":{"https://developer.apple.com/documentation/swiftui/environmentkey":{"title":"EnvironmentKey documentation","titleInlineContent":[{"type":"text","text":"EnvironmentKey documentation"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/environmentkey","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/environmentkey"},"https://github.com/groue/GRDB.swift/blob/master/README.md#valueobservation":{"title":"ValueObservation","titleInlineContent":[{"type":"text","text":"ValueObservation"}],"type":"link","identifier":"https:\/\/github.com\/groue\/GRDB.swift\/blob\/master\/README.md#valueobservation","url":"https:\/\/github.com\/groue\/GRDB.swift\/blob\/master\/README.md#valueobservation"},"doc://GRDBQuery/documentation/GRDBQuery/Query":{"role":"symbol","title":"Query","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Query"}],"abstract":[{"type":"text","text":"A property wrapper type that subscribes to its "},{"type":"codeVoice","code":"Request"},{"type":"text","text":" (a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/Queryable"},{"type":"text","text":" "},{"type":"text","text":"type), and invalidates a SwiftUI view whenever the database values change."}],"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/Query","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Query"}],"url":"\/documentation\/grdbquery\/query"},"doc://GRDBQuery/documentation/GRDBQuery":{"role":"collection","title":"GRDBQuery","abstract":[{"type":"text","text":"The SwiftUI companion for GRDB"}],"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery","kind":"symbol","type":"topic","url":"\/documentation\/grdbquery"},"doc://GRDBQuery/documentation/GRDBQuery/Queryable":{"role":"symbol","title":"Queryable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Queryable"}],"abstract":[{"type":"codeVoice","code":"Queryable"},{"type":"text","text":" types feed the the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/Query"},{"type":"text","text":" property wrapper."}],"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/Queryable","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Queryable"}],"url":"\/documentation\/grdbquery\/queryable"},"http://github.com/groue/GRDB.swift":{"title":"GRDB","titleInlineContent":[{"type":"text","text":"GRDB"}],"type":"link","identifier":"http:\/\/github.com\/groue\/GRDB.swift","url":"http:\/\/github.com\/groue\/GRDB.swift"},"https://developer.apple.com/documentation/swiftui/view/onreceive(_:perform:)":{"title":"onReceive(_:perform)","titleInlineContent":[{"type":"codeVoice","code":"onReceive(_:perform)"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/view\/onreceive(_:perform:)","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/view\/onreceive(_:perform:)"},"https://github.com/groue/GRDB.swift/blob/master/README.md#database-queues":{"title":"DatabaseQueue","titleInlineContent":[{"type":"text","text":"DatabaseQueue"}],"type":"link","identifier":"https:\/\/github.com\/groue\/GRDB.swift\/blob\/master\/README.md#database-queues","url":"https:\/\/github.com\/groue\/GRDB.swift\/blob\/master\/README.md#database-queues"},"https://github.com/groue/GRDB.swift/tree/master/Documentation/DemoApps":{"title":"GRDB demo apps","titleInlineContent":[{"type":"text","text":"GRDB demo apps"}],"type":"link","identifier":"https:\/\/github.com\/groue\/GRDB.swift\/tree\/master\/Documentation\/DemoApps","url":"https:\/\/github.com\/groue\/GRDB.swift\/tree\/master\/Documentation\/DemoApps"},"https://developer.apple.com/documentation/swiftui/fetchrequest":{"title":"@FetchRequest","titleInlineContent":[{"type":"codeVoice","code":"@FetchRequest"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/fetchrequest","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/fetchrequest"},"https://developer.apple.com/documentation/swiftui/view/redacted(reason:)":{"title":"redacted","titleInlineContent":[{"type":"text","text":"redacted"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/view\/redacted(reason:)","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/view\/redacted(reason:)"},"https://developer.apple.com/documentation/swiftui/view/onappear(perform:)":{"title":"onAppear(perform:)","titleInlineContent":[{"type":"codeVoice","code":"onAppear(perform:)"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/view\/onappear(perform:)","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/view\/onappear(perform:)"}}}