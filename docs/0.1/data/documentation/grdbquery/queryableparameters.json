{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"@Query"},{"type":"text","text":" property wrapper feeds a SwiftUI view with the database values published by a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/Queryable"},{"type":"text","text":" request. Sometimes, the view needs to configure this request, and control the database values it displays."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As an example, let’s consider a SwiftUI list of players that needs to control how the list is ordered: by name, or by score. You will adapt this example to your own needs (sorting, filtering, etc.)"}]},{"anchor":"A-Configurable-Queryable-Type","level":2,"type":"heading","text":"A Configurable Queryable Type"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s extend the "},{"type":"codeVoice","code":"AllPlayers"},{"type":"text","text":" type we have seen in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/GettingStarted"},{"type":"text","text":". It can now sort players by score, or by name, depending on its "},{"type":"codeVoice","code":"ordering"},{"type":"text","text":" property:"}]},{"type":"codeListing","syntax":"swift","code":["struct AllPlayers: Queryable {","    enum Ordering {","        case byScore","        case byName","    }","","    \/\/\/ How players are sorted.","    var ordering: Ordering","","    static var defaultValue: [Player] { [] }","","    func publisher(in dbQueue: DatabaseQueue) -> AnyPublisher<[Player], Error> {","        ValueObservation","            .tracking { db in try fetchValue(db) }","            .publisher(in: dbQueue, scheduling: .immediate)","            .eraseToAnyPublisher()","    }","","    private func fetchValue(_ db: Database) throws -> [Player] {","        switch ordering {","        case .byScore:","            return try Player","                .order(Column(\"score\").desc)","                .fetchAll(db)","        case .byName:","            return try Player","                .order(Column(\"name\"))","                .fetchAll(db)","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"@Query"},{"type":"text","text":" property wrapper will detect changes in the "},{"type":"codeVoice","code":"ordering"},{"type":"text","text":" property, and update SwiftUI views accordingly. Such detection is possible because the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/Queryable"},{"type":"text","text":" protocol inherits from the standard "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}]},{"anchor":"Modifying-the-Request-from-the-SwiftUI-View","level":2,"type":"heading","text":"Modifying the Request from the SwiftUI View"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftUI views can change the properties of the Queryable request with the SwiftUI Binding provided by the "},{"type":"codeVoice","code":"@Query"},{"type":"text","text":" property wrapper:"}]},{"type":"codeListing","syntax":"swift","code":["import GRDBQuery","import SwiftUI","","struct PlayerList: View {","    \/\/ Ordering can change through the $players.ordering binding.","    @Query(AllPlayers(ordering: .byScore))","    var players: [Player]","","    var body: some View {","        List(players) { player in","            HStack {","                Text(player.name)","                Spacer()","                Text(\"\\(player.score) points\")","            }","        }","        .toolbar {","            ToolbarItem(placement: .navigationBarTrailing) {","                ToggleOrderingButton(ordering: $players.ordering)","            }","        }","    }","}","","struct ToggleOrderingButton: View {","    @Binding var ordering: AllPlayers.Ordering","","    var body: some View {","        switch ordering {","        case .byName:","            Button(\"By Score\") { ordering = .byScore }","        case .byScore:","            Button(\"By Name\") { ordering = .byName }","        }","    }","}"]},{"anchor":"Configuring-the-Initial-Request","level":2,"type":"heading","text":"Configuring the Initial Request"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The above example has the "},{"type":"codeVoice","code":"PlayerList"},{"type":"text","text":" view always start with the "},{"type":"codeVoice","code":".byScore"},{"type":"text","text":" ordering. When you want to provide the initial ordering as a parameter to your view, modify the sample code as below:"}]},{"type":"codeListing","syntax":"swift","code":["struct PlayerList: View {","    @Query<AllPlayers>","    var players: [Player]","","    init(initialOrdering: AllPlayers.Ordering) {","        _players = Query(AllPlayers(ordering: initialOrdering))","    }","","    ...","}"]}]}],"schemaVersion":{"major":0,"minor":2,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/grdbquery\/queryableparameters"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/QueryableParameters","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Learn how a SwiftUI view can configure the database content it displays."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Adding Parameters to Queryable Types","role":"article","modules":[{"name":"GRDBQuery"}]},"hierarchy":{"paths":[["doc:\/\/GRDBQuery\/documentation\/GRDBQuery"]]},"seeAlsoSections":[{"title":"Guides","identifiers":["doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/GettingStarted"],"generated":true}],"references":{"doc://GRDBQuery/documentation/GRDBQuery/GettingStarted":{"role":"collectionGroup","title":"Getting Started","abstract":[{"type":"text","text":"A step-by-step guide for using "},{"type":"codeVoice","code":"@Query"},{"type":"text","text":" in your SwiftUI application."}],"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/GettingStarted","kind":"article","type":"topic","url":"\/documentation\/grdbquery\/gettingstarted"},"doc://GRDBQuery/documentation/GRDBQuery/Query":{"role":"symbol","title":"Query","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Query"}],"abstract":[{"type":"text","text":"A property wrapper that subscribes to its "},{"type":"codeVoice","code":"Request"},{"type":"text","text":" (a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/Queryable"},{"type":"text","text":" "},{"type":"text","text":"type), and invalidates a SwiftUI view whenever the database values change."}],"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/Query","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Query"}],"url":"\/documentation\/grdbquery\/query"},"doc://GRDBQuery/documentation/GRDBQuery/Queryable":{"role":"symbol","title":"Queryable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Queryable"}],"abstract":[{"type":"codeVoice","code":"Queryable"},{"type":"text","text":" types feed the the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/Query"},{"type":"text","text":" property wrapper."}],"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/Queryable","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Queryable"}],"url":"\/documentation\/grdbquery\/queryable"},"doc://GRDBQuery/documentation/GRDBQuery":{"role":"collection","title":"GRDBQuery","abstract":[{"type":"text","text":"The SwiftUI companion for GRDB"}],"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery","kind":"symbol","type":"topic","url":"\/documentation\/grdbquery"}}}