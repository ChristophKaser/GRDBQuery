{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Queryable"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Equatable","preciseIdentifier":"s:SQ"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The role of a "},{"type":"codeVoice","code":"Queryable"},{"type":"text","text":" type is to build a Combine publisher of database"},{"type":"text","text":" "},{"type":"text","text":"values, with its "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/Queryable\/publisher(in:)"},{"type":"text","text":" method. The published values feed"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI views that use the "},{"type":"codeVoice","code":"@Query"},{"type":"text","text":" property wrapper: each time a new value"},{"type":"text","text":" "},{"type":"text","text":"is published, the view updates accordingly."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Queryable"},{"type":"text","text":" type also provides a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/Queryable\/defaultValue"},{"type":"text","text":", which is displayed"},{"type":"text","text":" "},{"type":"text","text":"until the publisher publishes its initial value."}]},{"anchor":"Example","level":2,"type":"heading","text":"Example"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The sample code below defines "},{"type":"codeVoice","code":"AllPlayers"},{"type":"text","text":", a "},{"type":"codeVoice","code":"Queryable"},{"type":"text","text":" type that"},{"type":"text","text":" "},{"type":"text","text":"publishes the list of players found in the database:"}]},{"type":"codeListing","syntax":"swift","code":["import Combine","import GRDB","import GRDBQuery","","\/\/\/ Tracks the full list of players","struct AllPlayers: Queryable {","    static var defaultValue: [Player] { [] }","","    func publisher(in dbQueue: DatabaseQueue) -> AnyPublisher<[Player], Error> {","        ValueObservation","            .tracking(Player.fetchAll)","            .publisher(in: dbQueue, scheduling: .immediate)","            .eraseToAnyPublisher()","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This "},{"type":"codeVoice","code":"AllPlayers"},{"type":"text","text":" type will automatically update a SwiftUI view on every"},{"type":"text","text":" "},{"type":"text","text":"database changes, when wrapped by the "},{"type":"codeVoice","code":"@Query"},{"type":"text","text":" property wrapper:"}]},{"type":"codeListing","syntax":"swift","code":["import GRDBQuery","import SwiftUI","","struct PlayerList: View {","    @Query(AllPlayers())","    var players: [Player]","","    var body: some View {","        List(players) { player in","            HStack {","                Text(player.name)","                Spacer()","                Text(\"\\(player.score) points\")","            }","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For an explanation of how this works, and the required setup, please check"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery"},{"type":"text","text":" overview."}]},{"anchor":"Defining-Parameters","level":2,"type":"heading","text":"Defining Parameters"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Queryable"},{"type":"text","text":" type can adapt its Combine publisher according to its inner"},{"type":"text","text":" "},{"type":"text","text":"properties."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"@Query"},{"type":"text","text":" property wrapper detects changes in these properties,"},{"type":"text","text":" "},{"type":"text","text":"subscribes to the new publisher, and update SwiftUI views accordingly. The"},{"type":"text","text":" "},{"type":"codeVoice","code":"Queryable"},{"type":"text","text":" protocol inherits from the standard "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" protocol in"},{"type":"text","text":" "},{"type":"text","text":"order to make it possible to detect those changes."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, letâ€™s extend the above "},{"type":"codeVoice","code":"AllPlayers"},{"type":"text","text":" type so that it can sort"},{"type":"text","text":" "},{"type":"text","text":"players by score, or by name:"}]},{"type":"codeListing","syntax":"swift","code":["struct AllPlayers: Queryable {","    enum Ordering {","        case byScore","        case byName","    }","","    \/\/\/ How players are sorted.","    var ordering: Ordering","","    static var defaultValue: [Player] { [] }","","    func publisher(in dbQueue: DatabaseQueue) -> AnyPublisher<[Player], Error> {","        ValueObservation","            .tracking { db in try fetchValue(db) }","            .publisher(in: dbQueue, scheduling: .immediate)","            .eraseToAnyPublisher()","    }","","    private func fetchValue(_ db: Database) throws -> [Player] {","        switch ordering {","        case .byScore:","            return try Player","                .order(Column(\"score\").desc)","                .fetchAll(db)","        case .byName:","            return try Player","                .order(Column(\"name\"))","                .fetchAll(db)","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftUI views can change these properties with the Binding provided by the"},{"type":"text","text":" "},{"type":"codeVoice","code":"@Query"},{"type":"text","text":" property wrapper:"}]},{"type":"codeListing","syntax":"swift","code":["import GRDBQuery","import SwiftUI","","struct PlayerList: View {","    \/\/ Ordering can change through the $players.ordering binding.","    @Query(AllPlayers(ordering: .byScore))","    var players: [Player]","","    var body: some View {","        List(players) { player in","            HStack {","                Text(player.name)","                Spacer()","                Text(\"\\(player.score) points\")","            }","        }","        .toolbar {","            ToolbarItem(placement: .navigationBarTrailing) {","                ToggleOrderingButton(ordering: $players.ordering)","            }","        }","    }","}","","struct ToggleOrderingButton: View {","    @Binding var ordering: AllPlayers.Ordering","","    var body: some View {","        switch ordering {","        case .byName:","            Button(\"By Score\") { ordering = .byScore }","        case .byScore:","            Button(\"By Name\") { ordering = .byName }","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The above example has the "},{"type":"codeVoice","code":"PlayerList"},{"type":"text","text":" view always start with the "},{"type":"codeVoice","code":".byScore"},{"type":"text","text":" "},{"type":"text","text":"ordering. When you want to provide the initial ordering as a parameter to"},{"type":"text","text":" "},{"type":"text","text":"your view, modify the sample code as below:"}]},{"type":"codeListing","syntax":"swift","code":["struct PlayerList: View {","    @Query<AllPlayers>","    var players: [Player]","","    init(initialOrdering: AllPlayers.Ordering) {","        _players = Query(AllPlayers(ordering: initialOrdering))","    }"]}]}],"schemaVersion":{"major":0,"minor":2,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/grdbquery\/queryable"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/GRDBQuery\/SQ"],"kind":"relationships","title":"Inherits From","type":"inheritsFrom"}],"identifier":{"url":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/Queryable","interfaceLanguage":"swift"},"abstract":[{"type":"codeVoice","code":"Queryable"},{"type":"text","text":" types feed the the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/Query"},{"type":"text","text":" property wrapper."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Queryable"}],"title":"Queryable","roleHeading":"Protocol","role":"symbol","symbolKind":"protocol","externalID":"s:9GRDBQuery9QueryableP","modules":[{"name":"GRDBQuery"}],"navigatorTitle":[{"kind":"identifier","text":"Queryable"}]},"hierarchy":{"paths":[["doc:\/\/GRDBQuery\/documentation\/GRDBQuery"]]},"topicSections":[{"title":"Associated Types","identifiers":["doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/Queryable\/DatabaseContext","doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/Queryable\/ValuePublisher","doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/Queryable\/Value"]},{"title":"Database Values","identifiers":["doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/Queryable\/defaultValue","doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/Queryable\/publisher(in:)"]}],"references":{"doc://GRDBQuery/documentation/GRDBQuery/Queryable/publisher(in:)":{"role":"symbol","title":"publisher(in:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"publisher"},{"kind":"text","text":"("},{"kind":"externalParam","text":"in"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"DatabaseContext"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"ValuePublisher"}],"abstract":[{"type":"text","text":"Returns a Combine publisher of database values."}],"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/Queryable\/publisher(in:)","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/grdbquery\/queryable\/publisher(in:)"},"doc://GRDBQuery/documentation/GRDBQuery":{"role":"collection","title":"GRDBQuery","abstract":[{"type":"text","text":"The SwiftUI companion for GRDB"}],"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery","kind":"symbol","type":"topic","url":"\/documentation\/grdbquery"},"doc://GRDBQuery/documentation/GRDBQuery/Queryable/DatabaseContext":{"role":"symbol","title":"DatabaseContext","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"DatabaseContext"}],"abstract":[{"type":"text","text":"The type that provides database access."}],"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/Queryable\/DatabaseContext","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/grdbquery\/queryable\/databasecontext"},"doc://GRDBQuery/documentation/GRDBQuery/Queryable/ValuePublisher":{"role":"symbol","title":"ValuePublisher","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"ValuePublisher"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Publisher","preciseIdentifier":"s:7Combine9PublisherP"}],"abstract":[{"type":"text","text":"The type of the Combine publisher of database values, returned"},{"type":"text","text":" "},{"type":"text","text":"from "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/Queryable\/publisher(in:)"},{"type":"text","text":"."}],"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/Queryable\/ValuePublisher","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/grdbquery\/queryable\/valuepublisher"},"doc://GRDBQuery/documentation/GRDBQuery/Queryable/Value":{"role":"symbol","title":"Queryable.Value","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Value"}],"abstract":[{"type":"text","text":"The type of the published values."}],"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/Queryable\/Value","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Value"}],"url":"\/documentation\/grdbquery\/queryable\/value"},"doc://GRDBQuery/documentation/GRDBQuery/Queryable/defaultValue":{"role":"symbol","title":"defaultValue","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"defaultValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Value"}],"abstract":[{"type":"text","text":"The default value, used until the Combine publisher publishes its"},{"type":"text","text":" "},{"type":"text","text":"initial value."}],"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/Queryable\/defaultValue","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/grdbquery\/queryable\/defaultvalue"},"doc://GRDBQuery/documentation/GRDBQuery/Query":{"role":"symbol","title":"Query","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Query"}],"abstract":[{"type":"text","text":"A property wrapper type that subscribes to its "},{"type":"codeVoice","code":"Request"},{"type":"text","text":" (a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/Queryable"},{"type":"text","text":" "},{"type":"text","text":"type), and invalidates a SwiftUI view whenever the database values change."}],"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/Query","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Query"}],"url":"\/documentation\/grdbquery\/query"},"doc://GRDBQuery/SQ":{"type":"unresolvable","title":"Swift.Equatable","identifier":"doc:\/\/GRDBQuery\/SQ"},"doc://GRDBQuery/documentation/GRDBQuery/Queryable":{"role":"symbol","title":"Queryable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Queryable"}],"abstract":[{"type":"codeVoice","code":"Queryable"},{"type":"text","text":" types feed the the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/Query"},{"type":"text","text":" property wrapper."}],"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/Queryable","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Queryable"}],"url":"\/documentation\/grdbquery\/queryable"}}}