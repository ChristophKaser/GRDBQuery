{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When a SwiftUI view needs to configure the database values displayed on screen, it will modify the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/Queryable"},{"type":"text","text":" request that feeds the "},{"type":"codeVoice","code":"@Query"},{"type":"text","text":" property wrapper."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Such configuration can be performed by the view that declares a "},{"type":"codeVoice","code":"@Query"},{"type":"text","text":" property. It can also be performed by the enclosing view. This article explores all your available options."}]},{"anchor":"A-Configurable-Queryable-Type","level":2,"type":"heading","text":"A Configurable Queryable Type"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As an example, let’s extend the "},{"type":"codeVoice","code":"PlayerRequest"},{"type":"text","text":" request type we have seen in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/GettingStarted"},{"type":"text","text":". It can now sort players by score, or by name, depending on its "},{"type":"codeVoice","code":"ordering"},{"type":"text","text":" property."}]},{"type":"codeListing","syntax":"swift","code":["struct PlayerRequest: Queryable {","    enum Ordering {","        case byScore","        case byName","    }","","    \/\/\/ How players are sorted.","    var ordering: Ordering","","    static var defaultValue: [Player] { [] }","","    func publisher(in dbQueue: DatabaseQueue) -> AnyPublisher<[Player], Error> {","        ValueObservation","            .tracking { db in try fetchValue(db) }","            .publisher(in: dbQueue, scheduling: .immediate)","            .eraseToAnyPublisher()","    }","","    private func fetchValue(_ db: Database) throws -> [Player] {","        switch ordering {","        case .byScore:","            return try Player","                .order(Column(\"score\").desc)","                .fetchAll(db)","        case .byName:","            return try Player","                .order(Column(\"name\"))","                .fetchAll(db)","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"@Query"},{"type":"text","text":" property wrapper will detect changes in the "},{"type":"codeVoice","code":"ordering"},{"type":"text","text":" property, and update SwiftUI views accordingly."}]},{"type":"aside","style":"experiment","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can adapt this example for your own needs. As you can see, you can modify the order to database values, but you can also change how they are filtered. All "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/groue\/GRDB.swift"},{"type":"text","text":" features are available."}]}]},{"anchor":"Modifying-the-Request-from-the-SwiftUI-View","level":2,"type":"heading","text":"Modifying the Request from the SwiftUI View"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftUI views can change the properties of the Queryable request with the SwiftUI bindings provided by the "},{"type":"codeVoice","code":"@Query"},{"type":"text","text":" property wrapper:"}]},{"type":"codeListing","syntax":"swift","code":["import GRDBQuery","import SwiftUI","","struct PlayerList: View {","    \/\/ Ordering can change through the $players.ordering binding.","    @Query(PlayerRequest(ordering: .byScore))","    var players: [Player]","","    var body: some View {","        List(players) { player in","            HStack {","                Text(player.name)","                Spacer()","                Text(\"\\(player.score) points\")","            }","        }","        .toolbar {","            ToolbarItem(placement: .navigationBarTrailing) {","                ToggleOrderingButton(ordering: $players.ordering)","            }","        }","    }","}","","struct ToggleOrderingButton: View {","    @Binding var ordering: PlayerRequest.Ordering","","    var body: some View {","        switch ordering {","        case .byName:","            Button(\"By Score\") { ordering = .byScore }","        case .byScore:","            Button(\"By Name\") { ordering = .byName }","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the above example, "},{"type":"codeVoice","code":"$players.ordering"},{"type":"text","text":" is a SwiftUI binding to the "},{"type":"codeVoice","code":"ordering"},{"type":"text","text":" property of the "},{"type":"codeVoice","code":"PlayerRequest"},{"type":"text","text":" request."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This binding feeds "},{"type":"codeVoice","code":"ToggleOrderingButton"},{"type":"text","text":", which lets the user change the ordering of the request. "},{"type":"codeVoice","code":"@Query"},{"type":"text","text":" then redraws the view with an updated database content."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When appropriate, you can also use "},{"type":"codeVoice","code":"$players.request"},{"type":"text","text":", a SwiftUI binding to the "},{"type":"codeVoice","code":"PlayerRequest"},{"type":"text","text":" request itself."}]},{"anchor":"Configuring-the-Initial-Request","level":2,"type":"heading","text":"Configuring the Initial Request"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The above example has the "},{"type":"codeVoice","code":"PlayerList"},{"type":"text","text":" view always start with the "},{"type":"codeVoice","code":".byScore"},{"type":"text","text":" ordering."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you want to provide the initial request as a parameter to your view, provide a dedicated initializer:"}]},{"type":"codeListing","syntax":"swift","code":["struct PlayerList: View {","    \/\/\/ No default request","    @Query<PlayerRequest>","    var players: [Player]","","    \/\/\/ Explicit initial request","    init(initialOrdering: PlayerRequest.Ordering) {","        _players = Query(PlayerRequest(ordering: initialOrdering))","    }","","    var body: some View { ... }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Defining a default ordering is still possible:"}]},{"type":"codeListing","syntax":"swift","code":["struct PlayerList: View {","    \/\/\/ Defines the default initial request (ordered by score)","    @Query(PlayerRequest(ordering: .byScore))","    var players: [Player]","","    \/\/\/ Default initial request (by score)","    init() { }","    ","    \/\/\/ Explicit initial request","    init(initialOrdering ordering: PlayerRequest.Ordering) {","        _players = Query(PlayerRequest(ordering: ordering))","    }","","    var body: some View { ... }","}"]},{"type":"aside","style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The initial request is only used when "},{"type":"codeVoice","code":"PlayerList"},{"type":"text","text":" appears on screen. After that, and until "},{"type":"codeVoice","code":"PlayerList"},{"type":"text","text":" disappears, the request is only controlled by the "},{"type":"codeVoice","code":"$players"},{"type":"text","text":" bindings described above."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This means that calling the "},{"type":"codeVoice","code":"PlayerList(initialOrdering:)"},{"type":"text","text":" with a different ordering will have no effect:"}]},{"type":"codeListing","syntax":"swift","code":["struct Container {","    @State var ordering = PlayerRequest.Ordering.byScore","","    var body: some View {","        \/\/ No effect when the ordering State changes after the `PlayerList`","        \/\/ has appeared on screen:","        PlayerList(initialOrdering: ordering)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To let the enclosing view control the request after "},{"type":"codeVoice","code":"PlayerList"},{"type":"text","text":" has appeared on screen, you’ll need one of the techniques described below."}]}]},{"anchor":"Initializing-@Query-from-a-Request-Binding","level":2,"type":"heading","text":"Initializing @Query from a Request Binding"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"@Query"},{"type":"text","text":" property wrapper can be controlled with a SwiftUI binding, as in the example below:"}]},{"type":"codeListing","syntax":"swift","code":["struct Container {","    @State var ordering = PlayerRequest.Ordering.byScore","","    var body: some View {","        PlayerList(ordering: $ordering) \/\/ Note the `$ordering` binding here","    }","}","","struct PlayerList: View {","    @Query<PlayerRequest>","    var players: [Player]","","    init(ordering: Binding<PlayerRequest.Ordering>) {","        _players = Query(Binding(","            get: { PlayerRequest(ordering: ordering.wrappedValue) },","            set: { request in ordering.wrappedValue = request.ordering }))","    }","","    var body: some View { ... }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With such a setup, "},{"type":"codeVoice","code":"@Query"},{"type":"text","text":" updates the database content whenever a change is performed by the "},{"type":"codeVoice","code":"$ordering"},{"type":"text","text":" Container binding, or the "},{"type":"codeVoice","code":"$players"},{"type":"text","text":" PlayerList bindings."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is the classic two-way connection enabled by SwiftUI "},{"type":"codeVoice","code":"Binding"},{"type":"text","text":"."}]},{"anchor":"Initializing-@Query-from-a-Constant-Request","level":2,"type":"heading","text":"Initializing @Query from a Constant Request"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/Query\/init(constant:in:)"},{"type":"text","text":" initializer allows the enclosing Container view to control the request without restriction, and without any SwiftUI Binding. However, "},{"type":"codeVoice","code":"$players"},{"type":"text","text":" binding have no effect:"}]},{"type":"codeListing","syntax":"swift","code":["struct Container {","    var ordering: PlayerRequest.Ordering","","    var body: some View {","        PlayerList(constantOrdering: ordering)","    }","}","","struct PlayerList: View {","    @Query<PlayerRequest>","    var players: [Player]","","    init(constantOrdering ordering: PlayerRequest.Ordering) {","        _players = Query(constant: PlayerRequest(ordering: ordering))","    }","","    var body: some View { ... }","}"]},{"anchor":"Summary","level":2,"type":"heading","text":"Summary"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"All the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/Query"},{"type":"text","text":" initializers we have seen above can be used in any given SwiftUI view."}]}]},{"type":"codeListing","syntax":"swift","code":["struct PlayerList: View {","    \/\/\/ Defines the default initial request (ordered by score)","    @Query(PlayerRequest(ordering: .byScore))","    var players: [Player]","","    \/\/\/ Default initial request (by score)","    init() { }","    ","    \/\/\/ Initial request","    init(initialOrdering ordering: PlayerRequest.Ordering) {","        _players = Query(PlayerRequest(ordering: ordering))","    }","","    \/\/\/ Request binding","    init(ordering: Binding<PlayerRequest.Ordering>) {","        _players = Query(Binding(","            get: { PlayerRequest(ordering: ordering.wrappedValue) },","            set: { request in ordering.wrappedValue = request.ordering }))","    }","","    \/\/\/ Constant request","    init(constantOrdering ordering: PlayerRequest.Ordering) {","        _players = Query(constant: PlayerRequest(ordering: ordering))","    }","","    var body: some View { ... }","}"]}]}],"schemaVersion":{"major":0,"minor":2,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/grdbquery\/queryableparameters"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/QueryableParameters","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Learn how SwiftUI views can configure the database content displayed on screen."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Adding Parameters to Queryable Types","role":"article","modules":[{"name":"GRDBQuery"}]},"hierarchy":{"paths":[["doc:\/\/GRDBQuery\/documentation\/GRDBQuery"]]},"seeAlsoSections":[{"title":"Guides","identifiers":["doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/GettingStarted"],"generated":true}],"references":{"doc://GRDBQuery/documentation/GRDBQuery/GettingStarted":{"role":"collectionGroup","title":"Getting Started","abstract":[{"type":"text","text":"A step-by-step guide for using "},{"type":"codeVoice","code":"@Query"},{"type":"text","text":" in your SwiftUI application."}],"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/GettingStarted","kind":"article","type":"topic","url":"\/documentation\/grdbquery\/gettingstarted"},"doc://GRDBQuery/documentation/GRDBQuery/Query":{"role":"symbol","title":"Query","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Query"}],"abstract":[{"type":"text","text":"A property wrapper that subscribes to its "},{"type":"codeVoice","code":"Request"},{"type":"text","text":" (a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/Queryable"},{"type":"text","text":" "},{"type":"text","text":"type), and invalidates a SwiftUI view whenever the database values change."}],"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/Query","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Query"}],"url":"\/documentation\/grdbquery\/query"},"doc://GRDBQuery/documentation/GRDBQuery/Query/init(constant:in:)":{"role":"symbol","title":"init(constant:in:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"constant"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Request"},{"kind":"text","text":", "},{"kind":"externalParam","text":"in"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"KeyPath","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"EnvironmentValues","preciseIdentifier":"s:7SwiftUI17EnvironmentValuesV"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Request"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"DatabaseContext"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Creates a "},{"type":"codeVoice","code":"Query"},{"type":"text","text":", given a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/Queryable"},{"type":"text","text":" request, and a key path to the"},{"type":"text","text":" "},{"type":"text","text":"database in the SwiftUI environment."}],"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/Query\/init(constant:in:)","kind":"symbol","type":"topic","url":"\/documentation\/grdbquery\/query\/init(constant:in:)"},"https://github.com/groue/GRDB.swift":{"title":"GRDB","titleInlineContent":[{"type":"text","text":"GRDB"}],"type":"link","identifier":"https:\/\/github.com\/groue\/GRDB.swift","url":"https:\/\/github.com\/groue\/GRDB.swift"},"doc://GRDBQuery/documentation/GRDBQuery":{"role":"collection","title":"GRDBQuery","abstract":[{"type":"text","text":"The SwiftUI companion for GRDB"}],"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery","kind":"symbol","type":"topic","url":"\/documentation\/grdbquery"},"doc://GRDBQuery/documentation/GRDBQuery/Queryable":{"role":"symbol","title":"Queryable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Queryable"}],"abstract":[{"type":"codeVoice","code":"Queryable"},{"type":"text","text":" types feed the the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/Query"},{"type":"text","text":" property wrapper."}],"identifier":"doc:\/\/GRDBQuery\/documentation\/GRDBQuery\/Queryable","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Queryable"}],"url":"\/documentation\/grdbquery\/queryable"}}}